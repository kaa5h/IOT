import React, { useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useStore } from '../../store/useStore';
import { Card, CardContent } from '../../components/ui/Card';
import { Button } from '../../components/ui/Button';
import { Badge } from '../../components/ui/Badge';
import {
  ArrowLeft,
  Sparkles,
  Rocket,
  User,
  Calendar,
  Loader2,
  CheckCircle2,
} from 'lucide-react';
import { formatRelativeTime } from '../../lib/utils';
import { generateSCFWithLLM } from '../../lib/llmService';

export const GenerateSCF: React.FC = () => {
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { dataPointRequests, updateRequest, addMachine } = useStore();

  const request = dataPointRequests.find((r) => r.id === id);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isDeploying, setIsDeploying] = useState(false);
  const [generatedSCF, setGeneratedSCF] = useState(request?.scf);

  if (!request) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600">Request not found</p>
        <Button onClick={() => navigate('/requests')} className="mt-4">
          Back to Requests
        </Button>
      </div>
    );
  }

  const handleGenerateSCF = async () => {
    setIsGenerating(true);

    // Update status to generating
    updateRequest(request.id, {
      status: 'generating_scf',
    });

    try {
      // Generate SCF using LLM
      const scf = await generateSCFWithLLM(
        request.machineName,
        request.machineType,
        request.location,
        request.protocol,
        request.dataPoints,
        'IT'
      );

      setGeneratedSCF(scf);

      // Update request with SCF and set to approved (IT generated, no review needed)
      updateRequest(request.id, {
        scf,
        status: 'approved',
        reviewedBy: 'IT User (Self-Generated)',
        reviewedAt: new Date().toISOString(),
        reviewComments: 'Generated by IT using LLM',
      });

      setIsGenerating(false);
    } catch (error) {
      console.error('Error generating SCF:', error);
      setIsGenerating(false);
      alert('Failed to generate SCF. Please try again.');
    }
  };

  const handleDeploy = () => {
    setIsDeploying(true);

    // Create machine from SCF data
    const newMachine = {
      id: `machine-${Date.now()}`,
      name: request.machineName,
      type: request.machineType,
      location: request.location,
      description: request.description || '',
      protocol: {
        type: request.protocol,
        config: {}, // Would be parsed from SCF in real implementation
      },
      status: 'deploying' as const,
      dataPoints: request.dataPoints,
      lastUpdated: new Date().toISOString(),
      createdAt: new Date().toISOString(),
    };

    addMachine(newMachine);

    // Update request status to deployed
    updateRequest(request.id, {
      status: 'deployed',
      machineId: newMachine.id,
    });

    // Navigate to machine detail
    setTimeout(() => {
      navigate(`/machines/${newMachine.id}`);
    }, 1000);
  };

  const isGenerated = generatedSCF || request.scf;
  const isApproved = request.status === 'approved' || request.status === 'deployed';

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <Button
          variant="outline"
          size="sm"
          onClick={() => navigate('/requests')}
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Requests
        </Button>

        <div className="flex items-start justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">
              Generate Service Commissioning File
            </h1>
            <p className="text-gray-600 mt-1">
              Use LLM to generate SCF from OT-provided data points
            </p>
          </div>
          <Badge className="bg-blue-100 text-blue-800">Filled by OT</Badge>
        </div>
      </div>

      {/* Request Details Card */}
      <Card>
        <CardContent className="p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Request Details</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-gray-600">Machine Name:</span>
              <span className="ml-2 font-medium">{request.machineName}</span>
            </div>
            <div>
              <span className="text-gray-600">Type:</span>
              <span className="ml-2 font-medium">{request.machineType}</span>
            </div>
            <div>
              <span className="text-gray-600">Location:</span>
              <span className="ml-2 font-medium">{request.location}</span>
            </div>
            <div>
              <span className="text-gray-600">Protocol:</span>
              <span className="ml-2 font-medium">{request.protocol.toUpperCase()}</span>
            </div>
          </div>

          <div className="mt-4 pt-4 border-t border-gray-200">
            <div className="flex items-center gap-6 text-sm">
              <div className="flex items-center gap-2">
                <User className="h-4 w-4 text-gray-400" />
                <span className="text-gray-600">Filled by:</span>
                <span className="font-medium">{request.filledBy}</span>
              </div>
              <div className="flex items-center gap-2">
                <Calendar className="h-4 w-4 text-gray-400" />
                <span className="text-gray-600">Filled:</span>
                <span className="font-medium">{formatRelativeTime(request.filledAt!)}</span>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Data Points from OT */}
      <Card>
        <CardContent className="p-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">
            Data Points from OT ({request.dataPoints.length})
          </h2>
          <div className="border border-gray-200 rounded-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b border-gray-200">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-600 uppercase">
                      Name
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-600 uppercase">
                      Address
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-600 uppercase">
                      Type
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-600 uppercase">
                      Access
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-600 uppercase">
                      Polling
                    </th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 bg-white">
                  {request.dataPoints.map((dp) => (
                    <tr key={dp.id} className="hover:bg-gray-50">
                      <td className="px-4 py-3 text-sm font-medium">{dp.name}</td>
                      <td className="px-4 py-3 text-sm font-mono text-gray-600">{dp.address}</td>
                      <td className="px-4 py-3 text-sm">{dp.dataType}</td>
                      <td className="px-4 py-3 text-sm">{dp.access}</td>
                      <td className="px-4 py-3 text-sm">{dp.pollingRate}ms</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generate SCF Section */}
      {!isGenerated && (
        <Card>
          <CardContent className="p-6">
            <div className="text-center py-8">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-100 to-primary/10 rounded-full flex items-center justify-center mx-auto mb-4">
                <Sparkles className="h-8 w-8 text-primary" />
              </div>
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                Ready to Generate SCF
              </h2>
              <p className="text-gray-600 mb-6">
                OT has provided {request.dataPoints.length} data points. Click below to generate
                the Service Commissioning File using AI.
              </p>
              <Button onClick={handleGenerateSCF} disabled={isGenerating} size="lg">
                {isGenerating ? (
                  <>
                    <Loader2 className="h-5 w-5 mr-2 animate-spin" />
                    Generating SCF with LLM...
                  </>
                ) : (
                  <>
                    <Sparkles className="h-5 w-5 mr-2" />
                    Generate SCF with LLM
                  </>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Generated SCF Display */}
      {isGenerated && (
        <>
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-semibold text-gray-900">
                  Generated Service Commissioning File (YAML)
                </h2>
                <div className="flex items-center gap-2 text-sm text-green-600">
                  <CheckCircle2 className="h-4 w-4" />
                  <span>Generated successfully</span>
                </div>
              </div>
              <div className="bg-gray-900 rounded-lg p-4 overflow-x-auto">
                <pre className="text-sm text-gray-100 font-mono whitespace-pre">
                  {(generatedSCF || request.scf)?.yaml}
                </pre>
              </div>
            </CardContent>
          </Card>

          {/* Deploy Section */}
          {isApproved && request.status !== 'deployed' && (
            <Card>
              <CardContent className="p-6">
                <div className="text-center py-6">
                  <div className="w-16 h-16 bg-gradient-to-br from-green-100 to-green-50 rounded-full flex items-center justify-center mx-auto mb-4">
                    <Rocket className="h-8 w-8 text-green-600" />
                  </div>
                  <h2 className="text-xl font-semibold text-gray-900 mb-2">
                    Ready for Deployment
                  </h2>
                  <p className="text-gray-600 mb-6">
                    The Service Commissioning File has been generated and validated. Deploy it to
                    create the machine connection.
                  </p>
                  <Button
                    onClick={handleDeploy}
                    disabled={isDeploying}
                    loading={isDeploying}
                    size="lg"
                  >
                    <Rocket className="h-5 w-5 mr-2" />
                    Deploy to Machine
                  </Button>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Deployed Status */}
          {request.status === 'deployed' && (
            <Card>
              <CardContent className="p-6">
                <div className="flex items-start gap-4 p-4 bg-green-50 rounded-lg border border-green-200">
                  <CheckCircle2 className="h-6 w-6 text-green-600 flex-shrink-0 mt-0.5" />
                  <div className="flex-1">
                    <h3 className="font-semibold text-green-900 mb-1">Successfully Deployed</h3>
                    <p className="text-sm text-green-800 mb-3">
                      The machine has been deployed and is now available in your machines list.
                    </p>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => navigate(`/machines/${request.machineId}`)}
                    >
                      View Machine
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </>
      )}
    </div>
  );
};
