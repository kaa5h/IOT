import { generateId } from './utils';
import type { Notification, NotificationType, NotificationPriority, UserRole } from '../types';

interface CreateNotificationParams {
  type: NotificationType;
  title: string;
  message: string;
  priority?: NotificationPriority;
  visibleTo: UserRole[];
  machineId?: string;
  machineName?: string;
  requestId?: string;
  deploymentId?: string;
  actionUrl?: string;
  actionLabel?: string;
}

export function createNotification(params: CreateNotificationParams): Notification {
  return {
    id: generateId('notif'),
    type: params.type,
    priority: params.priority || 'medium',
    title: params.title,
    message: params.message,
    timestamp: new Date().toISOString(),
    read: false,
    visibleTo: params.visibleTo,
    machineId: params.machineId,
    machineName: params.machineName,
    requestId: params.requestId,
    deploymentId: params.deploymentId,
    actionUrl: params.actionUrl,
    actionLabel: params.actionLabel,
  };
}

// Predefined notification generators for common scenarios

export const NotificationTemplates = {
  // Request created by IT
  requestCreated: (requestId: string, machineName: string): Notification =>
    createNotification({
      type: 'request_created',
      title: 'New Data Point Request',
      message: `IT has requested data points for ${machineName}`,
      priority: 'high',
      visibleTo: ['OT'],
      requestId,
      machineName,
      actionUrl: `/requests/${requestId}/configure`,
      actionLabel: 'Fill Data Points',
    }),

  // OT filled data points
  requestFilled: (requestId: string, machineName: string, route: string): Notification =>
    createNotification({
      type: 'request_filled',
      title: 'Data Points Filled',
      message: `OT has filled data points for ${machineName}${
        route === 'it_review' ? ' and sent for SCF generation' : ''
      }`,
      priority: 'high',
      visibleTo: ['IT'],
      requestId,
      machineName,
      actionUrl:
        route === 'it_review'
          ? `/requests/${requestId}/generate`
          : `/requests/${requestId}/review`,
      actionLabel: route === 'it_review' ? 'Generate SCF' : 'View Details',
    }),

  // SCF generated
  scfGenerated: (requestId: string, machineName: string, generatedBy: 'IT' | 'OT'): Notification =>
    createNotification({
      type: 'scf_generated',
      title: 'SCF Generated',
      message: `Service Commissioning File for ${machineName} generated by ${generatedBy}${
        generatedBy === 'OT' ? ' - Awaiting peer review' : ''
      }`,
      priority: generatedBy === 'OT' ? 'high' : 'medium',
      visibleTo: generatedBy === 'OT' ? ['IT'] : ['IT', 'OT'],
      requestId,
      machineName,
      actionUrl: generatedBy === 'OT' ? `/requests/${requestId}/review` : `/requests/${requestId}/generate`,
      actionLabel: generatedBy === 'OT' ? 'Review Now' : 'View SCF',
    }),

  // SCF awaiting review
  reviewPending: (requestId: string, machineName: string): Notification =>
    createNotification({
      type: 'review_pending',
      title: 'SCF Awaiting Review',
      message: `OT-generated SCF for ${machineName} needs your peer review`,
      priority: 'high',
      visibleTo: ['IT'],
      requestId,
      machineName,
      actionUrl: `/requests/${requestId}/review`,
      actionLabel: 'Review Now',
    }),

  // SCF approved
  scfApproved: (requestId: string, machineName: string, reviewComments?: string): Notification =>
    createNotification({
      type: 'scf_approved',
      title: 'SCF Approved',
      message: `Your SCF for ${machineName} has been approved by IT${
        reviewComments ? `: "${reviewComments}"` : ''
      }`,
      priority: 'medium',
      visibleTo: ['OT'],
      requestId,
      machineName,
      actionUrl: `/requests/${requestId}/review`,
      actionLabel: 'View Details',
    }),

  // SCF rejected
  scfRejected: (requestId: string, machineName: string, reviewComments: string): Notification =>
    createNotification({
      type: 'scf_rejected',
      title: 'SCF Rejected',
      message: `Your SCF for ${machineName} was rejected: "${reviewComments}"`,
      priority: 'high',
      visibleTo: ['OT'],
      requestId,
      machineName,
      actionUrl: `/requests/${requestId}/review`,
      actionLabel: 'View Feedback',
    }),

  // Deployment success
  deploymentSuccess: (machineId: string, machineName: string): Notification =>
    createNotification({
      type: 'deployment_success',
      title: 'Deployment Successful',
      message: `${machineName} has been deployed and connected successfully`,
      priority: 'medium',
      visibleTo: ['IT', 'OT'],
      machineId,
      machineName,
      actionUrl: `/machines/${machineId}`,
      actionLabel: 'View Machine',
    }),

  // Deployment failed
  deploymentFailed: (machineId: string, machineName: string, error: string): Notification =>
    createNotification({
      type: 'deployment_failed',
      title: 'Deployment Failed',
      message: `Failed to deploy ${machineName}: ${error}`,
      priority: 'urgent',
      visibleTo: ['IT'],
      machineId,
      machineName,
      actionUrl: `/machines/${machineId}`,
      actionLabel: 'View Details',
    }),

  // Machine connected
  machineConnected: (machineId: string, machineName: string): Notification =>
    createNotification({
      type: 'machine_connected',
      title: 'Machine Connected',
      message: `${machineName} is now online and transmitting data`,
      priority: 'low',
      visibleTo: ['IT', 'OT'],
      machineId,
      machineName,
      actionUrl: `/machines/${machineId}`,
      actionLabel: 'View Machine',
    }),

  // Machine disconnected
  machineDisconnected: (machineId: string, machineName: string): Notification =>
    createNotification({
      type: 'machine_disconnected',
      title: 'Machine Disconnected',
      message: `${machineName} has gone offline`,
      priority: 'high',
      visibleTo: ['IT'],
      machineId,
      machineName,
      actionUrl: `/machines/${machineId}`,
      actionLabel: 'Investigate',
    }),

  // Machine error
  machineError: (machineId: string, machineName: string, error: string): Notification =>
    createNotification({
      type: 'machine_error',
      title: 'Machine Error',
      message: `${machineName} reported an error: ${error}`,
      priority: 'urgent',
      visibleTo: ['IT'],
      machineId,
      machineName,
      actionUrl: `/machines/${machineId}`,
      actionLabel: 'View Error',
    }),

  // Validation warning
  validationWarning: (requestId: string, machineName: string, warning: string): Notification =>
    createNotification({
      type: 'validation_warning',
      title: 'Configuration Warning',
      message: `${machineName}: ${warning}`,
      priority: 'medium',
      visibleTo: ['OT'],
      requestId,
      machineName,
      actionUrl: `/requests/${requestId}/configure`,
      actionLabel: 'Fix Configuration',
    }),

  // System alert
  systemAlert: (title: string, message: string, priority: NotificationPriority = 'medium'): Notification =>
    createNotification({
      type: 'system_alert',
      title,
      message,
      priority,
      visibleTo: ['IT', 'OT'],
    }),

  // Git sync issue
  gitSyncIssue: (error: string): Notification =>
    createNotification({
      type: 'git_sync_issue',
      title: 'Git Sync Issue',
      message: `Git synchronization failed: ${error}`,
      priority: 'high',
      visibleTo: ['IT'],
    }),
};
