import type { DataPoint, ProtocolType, ServiceCommissioningFile } from '../types';
import { generateId, sleep } from './utils';

/**
 * Simulated LLM service for generating Service Commissioning Files (SCF)
 * In production, this would call an actual LLM API (OpenAI, Claude, etc.)
 */

export async function generateSCFWithLLM(
  machineName: string,
  machineType: string,
  location: string,
  protocol: ProtocolType,
  dataPoints: DataPoint[],
  generatedBy: 'IT' | 'OT'
): Promise<ServiceCommissioningFile> {
  // Simulate LLM processing time
  await sleep(3000);

  // Generate YAML based on protocol and data points
  const yaml = generateYAML(machineName, machineType, location, protocol, dataPoints);

  return {
    id: generateId('scf'),
    yaml,
    generatedAt: new Date().toISOString(),
    generatedBy,
    protocol,
    machineInfo: {
      name: machineName,
      type: machineType as any,
      location,
    },
  };
}

function generateYAML(
  machineName: string,
  machineType: string,
  location: string,
  protocol: ProtocolType,
  dataPoints: DataPoint[]
): string {
  const timestamp = new Date().toISOString();

  // Generate protocol-specific configuration
  let protocolConfig = '';

  switch (protocol) {
    case 'opcua':
      protocolConfig = `  endpoint: "opc.tcp://192.168.1.100:4840"
  security_mode: "Sign"
  security_policy: "Basic256Sha256"
  authentication:
    username: "\${OPCUA_USERNAME}"
    password: "\${OPCUA_PASSWORD}"`;
      break;

    case 's7':
      protocolConfig = `  ip_address: "192.168.1.100"
  rack: 0
  slot: 1
  connection_type: "PG"`;
      break;

    case 'modbus':
      protocolConfig = `  ip_address: "192.168.1.100"
  port: 502
  unit_id: 1
  timeout: 5000`;
      break;

    case 'mqtt':
      protocolConfig = `  broker: "mqtt://192.168.1.100:1883"
  client_id: "${machineName.toLowerCase().replace(/\s+/g, '-')}"
  username: "\${MQTT_USERNAME}"
  password: "\${MQTT_PASSWORD}"
  qos: 1`;
      break;

    default:
      protocolConfig = `  # Custom protocol configuration
  endpoint: "tcp://192.168.1.100:5000"`;
  }

  // Generate data points configuration
  const dataPointsYAML = dataPoints.map((dp) => {
    const pollingRate = dp.pollingRate || 1000;
    return `  - id: "${dp.name.toLowerCase().replace(/\s+/g, '_')}"
    name: "${dp.name}"
    address: "${dp.address}"
    data_type: "${dp.dataType.toLowerCase()}"
    access: "${dp.access}"
    polling_rate_ms: ${pollingRate}
    scaling:
      enabled: false
    validation:
      enabled: true
      min: null
      max: null`;
  }).join('\n\n');

  // Complete YAML structure
  return `# Service Commissioning File (SCF)
# Generated by LLM Assistant
# Timestamp: ${timestamp}
# DO NOT EDIT MANUALLY - This file is auto-generated

---
version: "1.0"
metadata:
  name: "${machineName}"
  type: "${machineType}"
  location: "${location}"
  protocol: "${protocol}"
  generated_at: "${timestamp}"
  status: "pending_deployment"

# Service Configuration
service:
  name: "${machineName.toLowerCase().replace(/\s+/g, '-')}-service"
  description: "Data acquisition service for ${machineName}"
  restart_policy: "always"
  health_check:
    enabled: true
    interval_seconds: 30
    timeout_seconds: 5
    retries: 3

# Protocol Configuration
protocol:
  type: "${protocol}"
  config:
${protocolConfig}

# Data Points Configuration
data_points:
${dataPointsYAML}

# Data Processing Pipeline
processing:
  buffer_size: 1000
  batch_size: 100
  compression: true
  encryption: true

# Output Configuration
output:
  targets:
    - type: "timeseries_db"
      endpoint: "\${TIMESERIES_DB_ENDPOINT}"
      database: "industrial_iot"
      measurement: "${machineName.toLowerCase().replace(/\s+/g, '_')}"

    - type: "message_queue"
      endpoint: "\${MESSAGE_QUEUE_ENDPOINT}"
      topic: "machines.${machineType.toLowerCase()}.${machineName.toLowerCase().replace(/\s+/g, '_')}"
      format: "json"

# Monitoring & Alerting
monitoring:
  metrics_enabled: true
  prometheus_endpoint: "/metrics"

  alerts:
    - name: "connection_lost"
      condition: "connection_status == 'disconnected'"
      duration: "5m"
      severity: "critical"
      notify: ["ops-team@company.com"]

    - name: "high_error_rate"
      condition: "error_rate > 0.05"
      duration: "10m"
      severity: "warning"
      notify: ["ops-team@company.com"]

# Logging Configuration
logging:
  level: "info"
  format: "json"
  output: "stdout"
  retention_days: 30

# Resource Limits
resources:
  cpu_limit: "500m"
  memory_limit: "512Mi"
  cpu_request: "100m"
  memory_request: "128Mi"

# Network Configuration
network:
  max_connections: 10
  connection_timeout_seconds: 30
  read_timeout_seconds: 10
  write_timeout_seconds: 10

# Security
security:
  tls_enabled: true
  certificate_path: "/certs/tls.crt"
  key_path: "/certs/tls.key"
  ca_path: "/certs/ca.crt"

# End of SCF
`;
}
